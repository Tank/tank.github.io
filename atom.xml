<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tank&#39;s C</title>
  <subtitle>来啊，快活啊，反正有大把时光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tankc.cn/"/>
  <updated>2017-03-02T15:59:47.000Z</updated>
  <id>https://tankc.cn/</id>
  
  <author>
    <name>Tank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FFmpeg-你要的都在这里</title>
    <link href="https://tankc.cn/2017/03/02/FFmpeg-%E4%BD%A0%E8%A6%81%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C/"/>
    <id>https://tankc.cn/2017/03/02/FFmpeg-你要的都在这里/</id>
    <published>2017-03-02T06:19:23.000Z</published>
    <updated>2017-03-02T15:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-开篇"><a href="#0-开篇" class="headerlink" title="0 - 开篇"></a>0 - 开篇</h2><p>&emsp;最近由于项目需要支持微信、QQ手机扫码直播，而对接厂家目前只支持WebRTC的方式，在移动设备端上支持度不够友好，研究一轮发现也没什么好选择，要么直接上<code>RTMP</code>要么直接上<code>HLS</code>或者两者并存。<br>&emsp;RTMP协议全称为Real Time Messaging Protocol(实时消息传输协议)，是由Adobe公司维护的基于TCP的协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种，在PC时代，由于Falsh占有率极高，而RTMP能直接在Flash上播放，不需要作任何的转换，深受各大直播厂家热爱。<br>&emsp;但是，Flash耗电不安全等各种硬伤在移动互联时代慢慢被抛弃了，尤其是iOS设备，当年乔老爷还在世的时候就喷Flash是垃圾，非常不受待见。所以要想更好地支持各种手机平台的直播，还要把HLS引进来。<br>&emsp;HLS协议全称为HTTP Live Streaming，是苹果公司动态码率自适应技术，为Mac和iOS设备提供良好的音视频服务（每年WWDC大会指定直播协议）。该协议包含一个m3u8的索引文件，文件大概长这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#EXTM3U</div><div class="line">#EXT-X-VERSION:3</div><div class="line">#EXT-X-MEDIA-SEQUENCE:0</div><div class="line">#EXT-X-TARGETDURATION:5</div><div class="line">#EXT-X-DISCONTINUITY</div><div class="line">#EXTINF:5.003,</div><div class="line">hlsplay-0.ts</div><div class="line">#EXTINF:5.002,</div><div class="line">hlsplay-1.ts</div><div class="line">#EXTINF:5.003,</div><div class="line">hlsplay-2.ts</div><div class="line">#EXTINF:5.004,</div><div class="line">hlsplay-3.ts</div><div class="line">#EXTINF:5.001,</div><div class="line">hlsplay-4.ts</div><div class="line">#EXTINF:3.566,</div><div class="line">hlsplay-5.ts</div></pre></td></tr></table></figure></p>
<p>可以清晰的看到里面有一堆的<code>.ts</code>，这些都是视频的分片文件，需要播放时，直接在浏览器打开地址如<code><a href="http://ip/live.m3u8" target="_blank" rel="external">http://ip/live.m3u8</a></code>就可以进行直播了，貌似比RTMP更方便，但HLS也有个硬伤，就是延时。因为每次生成分片视频的时候，都会更新m3u8文件，而当用户打开m3u8地址会从头开始读，假如有5个分片，然后每个分片是5秒钟，那么延时就是25秒。<br>&emsp;最后，主角ffmpeg要出场了，这是一个久负盛名的集录制、转换、音视频编码解码功能为一体的完整开源解决方案。轻轻松松地实现多种音视频格式之间的相互转换，ffmpeg套件中包含比较多的工具库，现在只拿其中的ffmpeg命令行工具进行使用。</p>
<h2 id="1-ffmpeg使用"><a href="#1-ffmpeg使用" class="headerlink" title="1 - ffmpeg使用"></a>1 - ffmpeg使用</h2><h3 id="1-1-安装ffmpeg"><a href="#1-1-安装ffmpeg" class="headerlink" title="1.1 - 安装ffmpeg"></a>1.1 - 安装ffmpeg</h3><p>安装ffmpeg可以有几种方式：</p>
<ol>
<li><p>通过 <a href="https://brew.sh/" target="_blank" rel="external">Brew</a> 安装，执行命令<code>brew install ffmpeg</code>，如果没有安装brew执行下面命令安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过官网下载<a href="http://evermeet.cx/ffmpeg/" target="_blank" rel="external">ffmpeg</a> dmg包，并将里面的ffmpeg二进制拷贝到/usr/local/bin目录下。</p>
</li>
<li>通过官网下载<a href="http://ffmpeg.org/download.html" target="_blank" rel="external">ffmpeg</a> 源码，打开压缩包进行编译安装。</li>
</ol>
<h3 id="1-2-简单使用ffmpeg"><a href="#1-2-简单使用ffmpeg" class="headerlink" title="1.2 - 简单使用ffmpeg"></a>1.2 - 简单使用ffmpeg</h3><p>安装好ffmpeg后，可以尝试打开<a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">官方文档</a> 或者通过<code>ffmpeg -h </code>查看帮助文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">Hyper fast Audio and Video encoder</div><div class="line">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</div><div class="line"></div><div class="line">Getting help:</div><div class="line">    -h      -- print basic options</div><div class="line">    -h long -- print more options</div><div class="line">    -h full -- print all options (including all format and codec specific options, very long)</div><div class="line">    -h type=name -- print all options for the named decoder/encoder/demuxer/muxer/filter</div><div class="line">    See man ffmpeg for detailed description of the options.</div><div class="line"></div><div class="line">Print help / information / capabilities:</div><div class="line">-L                  show license</div><div class="line">-h topic            show help</div><div class="line">-? topic            show help</div><div class="line">-help topic         show help</div><div class="line">--help topic        show help</div><div class="line">-version            show version</div><div class="line">-buildconf          show build configuration</div><div class="line">-formats            show available formats</div><div class="line">-devices            show available devices</div><div class="line">-codecs             show available codecs</div><div class="line">-decoders           show available decoders</div><div class="line">-encoders           show available encoders</div><div class="line">-bsfs               show available bit stream filters</div><div class="line">-protocols          show available protocols</div><div class="line">-filters            show available filters</div><div class="line">-pix_fmts           show available pixel formats</div><div class="line">-layouts            show standard channel layouts</div><div class="line">-sample_fmts        show available audio sample formats</div><div class="line">-colors             show available color names</div><div class="line">-sources device     list sources of the input device</div><div class="line">-sinks device       list sinks of the output device</div><div class="line">-hwaccels           show available HW acceleration methods</div><div class="line"></div><div class="line">Global options (affect whole program instead of just one file:</div><div class="line">-loglevel loglevel  set logging level</div><div class="line">-v loglevel         set logging level</div><div class="line">-report             generate a report</div><div class="line">-max_alloc bytes    set maximum size of a single allocated block</div><div class="line">-y                  overwrite output files</div><div class="line">-n                  never overwrite output files</div><div class="line">-ignore_unknown     Ignore unknown stream types</div><div class="line">-stats              print progress report during encoding</div><div class="line">-max_error_rate ratio of errors (0.0: no errors, 1.0: 100% error  maximum error rate</div><div class="line">-bits_per_raw_sample number  set the number of bits per raw sample</div><div class="line">-vol volume         change audio volume (256=normal)</div><div class="line"></div><div class="line">Per-file main options:</div><div class="line">-f fmt              force format</div><div class="line">-c codec            codec name</div><div class="line">-codec codec        codec name</div><div class="line">-pre preset         preset name</div><div class="line">-map_metadata outfile[,metadata]:infile[,metadata]  set metadata information of outfile from infile</div><div class="line">-t duration         record or transcode &quot;duration&quot; seconds of audio/video</div><div class="line">-to time_stop       record or transcode stop time</div><div class="line">-fs limit_size      set the limit file size in bytes</div><div class="line">-ss time_off        set the start time offset</div><div class="line">-sseof time_off     set the start time offset relative to EOF</div><div class="line">-seek_timestamp     enable/disable seeking by timestamp with -ss</div><div class="line">-timestamp time     set the recording timestamp (&apos;now&apos; to set the current time)</div><div class="line">-metadata string=string  add metadata</div><div class="line">-program title=string:st=number...  add program with specified streams</div><div class="line">-target type        specify target file type (&quot;vcd&quot;, &quot;svcd&quot;, &quot;dvd&quot;, &quot;dv&quot; or &quot;dv50&quot; with optional prefixes &quot;pal-&quot;, &quot;ntsc-&quot; or &quot;film-&quot;)</div><div class="line">-apad               audio pad</div><div class="line">-frames number      set the number of frames to output</div><div class="line">-filter filter_graph  set stream filtergraph</div><div class="line">-filter_script filename  read stream filtergraph description from a file</div><div class="line">-reinit_filter      reinit filtergraph on input parameter changes</div><div class="line">-discard            discard</div><div class="line">-disposition        disposition</div><div class="line"></div><div class="line">Video options:</div><div class="line">-vframes number     set the number of video frames to output</div><div class="line">-r rate             set frame rate (Hz value, fraction or abbreviation)</div><div class="line">-s size             set frame size (WxH or abbreviation)</div><div class="line">-aspect aspect      set aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</div><div class="line">-bits_per_raw_sample number  set the number of bits per raw sample</div><div class="line">-vn                 disable video</div><div class="line">-vcodec codec       force video codec (&apos;copy&apos; to copy stream)</div><div class="line">-timecode hh:mm:ss[:;.]ff  set initial TimeCode value.</div><div class="line">-pass n             select the pass number (1 to 3)</div><div class="line">-vf filter_graph    set video filters</div><div class="line">-ab bitrate         audio bitrate (please use -b:a)</div><div class="line">-b bitrate          video bitrate (please use -b:v)</div><div class="line">-dn                 disable data</div><div class="line"></div><div class="line">Audio options:</div><div class="line">-aframes number     set the number of audio frames to output</div><div class="line">-aq quality         set audio quality (codec-specific)</div><div class="line">-ar rate            set audio sampling rate (in Hz)</div><div class="line">-ac channels        set number of audio channels</div><div class="line">-an                 disable audio</div><div class="line">-acodec codec       force audio codec (&apos;copy&apos; to copy stream)</div><div class="line">-vol volume         change audio volume (256=normal)</div><div class="line">-af filter_graph    set audio filters</div><div class="line"></div><div class="line">Subtitle options:</div><div class="line">-s size             set frame size (WxH or abbreviation)</div><div class="line">-sn                 disable subtitle</div><div class="line">-scodec codec       force subtitle codec (&apos;copy&apos; to copy stream)</div><div class="line">-stag fourcc/tag    force subtitle tag/fourcc</div><div class="line">-fix_sub_duration   fix subtitles duration</div><div class="line">-canvas_size size   set canvas size (WxH or abbreviation)</div><div class="line">-spre preset        set the subtitle options to the indicated preset</div></pre></td></tr></table></figure></p>
<p>我们可以看到，ffmpeg的语法很简单，只需要设置一个全局参数，一个输入地址及其参数，一个输出地址及其参数即可完成复杂的音视频转换等，但由于参数组合繁杂，在实际的操作将会非常复杂。下面先展示一些简单的操作：</p>
<blockquote>
<p>格式转换，将视频文件test.flv转成test.mp4<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i ~/Desktop/flv/test.flv ~/Desktop/flv/test.mp4</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这是ffmpeg最基础的功能，<code>-i file_path</code>指定输入文件</p>
<blockquote>
<p>压缩视频，我们在浏览视频网站时，会根据网速加载不同清晰度的视频文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i ~/Desktop/flv/test.flv <span class="_">-s</span> 480x320 ~/Desktop/flv/test.mp4</div></pre></td></tr></table></figure></p>
</blockquote>
<p>我们看回帮助文档，<code>-s</code>的意思是<code>-s size             set frame size (WxH or abbreviation)</code>即设置视频的宽高比，所以上面会输出480x320的mp4文件</p>
<blockquote>
<p>将图片合成gif<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i ~/Desktop/<span class="built_in">test</span>/IMG_%d.JPG ~/Desktop/<span class="built_in">test</span>/test.gif</div></pre></td></tr></table></figure></p>
</blockquote>
<p>执行完，我们可以在桌面test目录中看到test.gif动态图，有这个技能，以后斗图还怕输？当然，如果把gif改成mp4，就会合成一个视频。<br><img src="/images/ffmpeg/2.jpg" alt=""></p>
<h2 id="2-走在时代前沿，视频直播"><a href="#2-走在时代前沿，视频直播" class="headerlink" title="2 - 走在时代前沿，视频直播"></a>2 - 走在时代前沿，视频直播</h2><p>上面通过对ffmpeg的简单操作后，大家可以了解到通过ffmpeg可以完成我们很多日常音视频服务。下面将介绍如何通过ffmpeg+nginx来搭建视频直播服务。</p>
<h3 id="2-1-搭建直播服务器"><a href="#2-1-搭建直播服务器" class="headerlink" title="2.1 - 搭建直播服务器"></a>2.1 - 搭建直播服务器</h3><p>前面已经说了可以通过rtmp或hls的方式来进行视频直播，所以我们还需要搭个视频服务器。目前比较通用的做法是通过nginx+rtmp模块的方式来进行，在mac下面可以通过brew来安装nginx+rtmp的方式完成直播服务器的搭建，非常简单。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. 添加nginx扩展，由于brew除了官方源外，还允许第三方源（通过由github托管），通过格式brew tap &lt;github_user/repo&gt; </span></div><div class="line">brew tap homebrew/nginx</div><div class="line"><span class="comment"># 2. 安装nginx及rtmp模块</span></div><div class="line">brew install nginx-full --with-rtmp-module</div><div class="line"><span class="comment"># 3. 查看nginx-full安装信息，可以看到nginx安装目录，配置文件路径，www目录以及启动方式等</span></div><div class="line">brew info nginx-info</div><div class="line"><span class="comment"># 4. 通过 3 可以得知nginx配置文件nginx.conf路径位于&lt;code&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt;，通过编辑器打开添加rtmp配置信息</span></div><div class="line">rtmp &#123;  </div><div class="line">    server &#123;  </div><div class="line">        listen 1935;  <span class="comment">#监听的端口</span></div><div class="line">        chunk_size 4000;  </div><div class="line">        </div><div class="line">        application hls &#123;  <span class="comment"># rtmp推流请求路径，同时开启hls，存储路径为www目录下的hls，切片时间为5秒</span></div><div class="line">            live on;  </div><div class="line">            hls on;  </div><div class="line">            hls_path /usr/<span class="built_in">local</span>/var/www/hls;  </div><div class="line">            hls_fragment 5s; </div><div class="line">            <span class="comment"># 下面三个选项表示是否需要同时启动视频录制，通常在教学直播中很多人要求看回录播，所以挺有必要的</span></div><div class="line">            record all;</div><div class="line">            record_path /usr/<span class="built_in">local</span>/var/www/hls/record;</div><div class="line">            record_suffix -%d-%b-%y-%T.mp4;</div><div class="line">        &#125;           </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">http &#123;</div><div class="line">    server &#123;</div><div class="line">        listen       8080;</div><div class="line">        server_name  localhost;</div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        location /hls &#123;  <span class="comment"># 表示路径http://localhost/hls</span></div><div class="line">            <span class="comment"># Serve HLS fragments  </span></div><div class="line">            types &#123;  </div><div class="line">                application/vnd.apple.mpegurl m3u8;  </div><div class="line">                video/mp2t ts;  </div><div class="line">            &#125;  </div><div class="line">            root html;  </div><div class="line">            expires -1;  </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># 5. 启动nginx服务器，通过 3 可以得知启动指令</span></div><div class="line">brew services start nginx-full</div><div class="line"><span class="comment"># 6. 通过访问http://localhost:8080可以发现nginx服务器已经启动成功</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/ffmpeg/1.jpeg" alt="我要的是直播服务服务器啊，给我个http服务器什么鬼！"><br>别急别急，到这一步，其实服务器已经配好了，下面将推流到rtmp服务器进行验证。</p>
<h3 id="2-2-验证视频推送"><a href="#2-2-验证视频推送" class="headerlink" title="2.2 - 验证视频推送"></a>2.2 - 验证视频推送</h3><blockquote>
<p>通过ffmpeg将视频推送至RTMP服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i ~/Desktop/<span class="built_in">test</span>/test.mp4 -vcodec copy <span class="_">-f</span> flv rtmp://localhost:1935/hls/meeting</div></pre></td></tr></table></figure></p>
</blockquote>
<p>根据配置文件分析，我们知道rtmp://localhost:1935/hls就是rtmp的一个服务了，然后meeting这个只是随便起的一个名字，然后打开视频播放器<a href="http://www.videolan.org/vlc/index.zh.html" target="_blank" rel="external">vlc</a>（如果没有安装vlc播放点击下载安装），点击<code>File</code>-&gt;<code>Open Network</code>并在Network栏输入地址<code>rtmp://localhost:1935/hls/metting</code>即可看到直播视频了。<br><img src="/images/ffmpeg/3.jpg" alt=""><br>没错，我们的直播服务器就搭建好了。</p>
<h3 id="2-3-屏幕共享"><a href="#2-3-屏幕共享" class="headerlink" title="2.3 - 屏幕共享"></a>2.3 - 屏幕共享</h3><p>视频服务器搭建好了，老板看了很欣慰，正要往你碗里夹鸡腿，但马上被反应过来了，你丫的拿个mp4做直播，谁看啊，我要高大上的现场直播。鸡腿没了，还要默默地回去加班研究。<br>在MacOS下面，ffmpeg通过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg <span class="_">-f</span> avfoundation -list_devices <span class="literal">true</span> -i <span class="string">""</span></div></pre></td></tr></table></figure></p>
<p>查看设备信息，如果没什么意外，则会输出设备信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[AVFoundation input device @ 0x7fcfe460e980] AVFoundation video devices:</div><div class="line">[AVFoundation input device @ 0x7fcfe460e980] [0] FaceTime HD Camera</div><div class="line">[AVFoundation input device @ 0x7fcfe460e980] [1] Capture screen 0</div><div class="line">[AVFoundation input device @ 0x7fcfe460e980] AVFoundation audio devices:</div><div class="line">[AVFoundation input device @ 0x7fcfe460e980] [0] Built-in Microphone</div></pre></td></tr></table></figure></p>
<p>表示视频流来源于摄像头和屏幕，而音频流则来源于内置麦克风<br>这里有个参数 <code>-f avfoundation</code>代表什么意思呢，这个是强制指定输入或输出的文件格式，这些支持的格式通常是默认的，但你也可以通过<code>ffmpeg -formats</code>来查看你要指定的格式，支持的格式非常惊人。在这里表示输入源为avfoundation，即苹果的音视频基础库。</p>
<blockquote>
<p>屏幕分享<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg <span class="_">-f</span> avfoundation -i <span class="string">"1"</span> -vcodec libx264 -preset ultrafast -acodec libfaac <span class="_">-f</span> flv rtmp://localhost:1935/hls/screencapture</div></pre></td></tr></table></figure></p>
</blockquote>
<p><code>-i “1”</code>表示只获取屏幕视频流，即Capture screen 0<br><code>-vcodec libx264</code> 表示无损编码模式<br><code>-preset ultrafast</code> 表示最快速度编码<br><code>-acodec libfaac</code> 表示音频使用faac压缩<br>然后我们可以通过打开地址<code>rtmp://localhost:1935/hls/screencapture</code>查看屏幕信息</p>
<blockquote>
<p>屏幕+Mic<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ffmpeg <span class="_">-f</span> avfoundation -i <span class="string">"1:0"</span> -vcodec libx264 -preset ultrafast \</div><div class="line">-acodec libmp3lame -ar 44100 -ac 1 <span class="_">-f</span> flv rtmp://localhost:1935/hls/screencapturewithmic</div></pre></td></tr></table></figure></p>
</blockquote>
<p><code>-i “1:0”</code>这里比上面多了个:0表示除了获取屏幕外再加个音频流，音频通过mp3压缩</p>
<blockquote>
<p>屏幕+Mic+摄像头<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ffmpeg <span class="_">-f</span> avfoundation -framerate 30 -i <span class="string">"1:0"</span> \</div><div class="line"><span class="_">-f</span> avfoundation -framerate 30 -video_size 640x480 -i <span class="string">"0"</span> \</div><div class="line">-c:v libx264 -preset ultrafast \</div><div class="line">-filter_complex <span class="string">'overlay=main_w-overlay_w-10:main_h-overlay_h-10'</span> \</div><div class="line">-acodec libmp3lame -ar 44100 -ac 1  <span class="_">-f</span> flv rtmp://localhost:1935/hls/all</div></pre></td></tr></table></figure></p>
</blockquote>
<p>具体看，多了一个摄像头的输入源，且视频窗口的尺寸为640x480，同时加了个滤镜。</p>
<p>至些。我们的直播已经支持多种丰富的输入模式了。<br>好吧。写得差不多了。应该可以去找老板领鸡腿了。Enjoy!<br><img src="/images/ffmpeg/4.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-开篇&quot;&gt;&lt;a href=&quot;#0-开篇&quot; class=&quot;headerlink&quot; title=&quot;0 - 开篇&quot;&gt;&lt;/a&gt;0 - 开篇&lt;/h2&gt;&lt;p&gt;&amp;emsp;最近由于项目需要支持微信、QQ手机扫码直播，而对接厂家目前只支持WebRTC的方式，在移动设备端上支持度
    
    </summary>
    
      <category term="ffmpeg" scheme="https://tankc.cn/categories/ffmpeg/"/>
    
    
      <category term="ffmpeg" scheme="https://tankc.cn/tags/ffmpeg/"/>
    
      <category term="nginx" scheme="https://tankc.cn/tags/nginx/"/>
    
      <category term="rtmp" scheme="https://tankc.cn/tags/rtmp/"/>
    
      <category term="hls" scheme="https://tankc.cn/tags/hls/"/>
    
  </entry>
  
  <entry>
    <title>MySql-忘记root密码如何恢复？</title>
    <link href="https://tankc.cn/2017/02/26/MySql-%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%EF%BC%9F/"/>
    <id>https://tankc.cn/2017/02/26/MySql-忘记root密码如何恢复？/</id>
    <published>2017-02-26T08:43:11.000Z</published>
    <updated>2017-03-01T10:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前在Mac下面安装了Mysql，很久没用后不小心忘了root密码（一直以为是123456，有点尴尬），然后以为完整删除再重装会重置密码，发现还是不行。经过一番搜索后终于找到办法，记录一下。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. 打开终端</div><div class="line">2. 输入指令将mysql服务停止：sudo /usr/local/mysql/support-files/mysql.server stop</div><div class="line">3. 输入指令进入安全模式：sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables</div><div class="line">4. 打开另外一个终端窗口</div><div class="line">5. 输入指令：sudo /usr/local/mysql/bin/mysql -u root</div><div class="line">6. 这时进入到mysql shell，执行语句进入到mysql的表：use mysql;</div><div class="line">7. 执行语句：update user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos;;</div></pre></td></tr></table></figure>
<p>这样就OK了。</p>
<p>附带几个经常使用的操作：</p>
<h3 id="设置utf8-utf8mb4"><a href="#设置utf8-utf8mb4" class="headerlink" title="设置utf8/utf8mb4"></a>设置utf8/utf8mb4</h3><p>默认情况下，mysql的字符集是latin1，是单字节编码，对中文的支持不友好，可通过以下语句查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &apos;%char%&apos;;</div><div class="line">+--------------------------+-----------------------------------------------------------+</div><div class="line">| Variable_name            | Value                                                     |</div><div class="line">+--------------------------+-----------------------------------------------------------+</div><div class="line">| character_set_client     | latin1                                                    |</div><div class="line">| character_set_connection | latin1                                                    |</div><div class="line">| character_set_database   | latin1                                                    |</div><div class="line">| character_set_filesystem | binary                                                    |</div><div class="line">| character_set_results    | latin1                                                    |</div><div class="line">| character_set_server     | latin1                                                    |</div><div class="line">| character_set_system     | utf8                                                      |</div><div class="line">| character_sets_dir       | /usr/local/mysql/charsets/                                |</div><div class="line">+--------------------------+-----------------------------------------------------------+</div><div class="line">8 rows in set (0.08 sec)</div></pre></td></tr></table></figure></p>
<p>如果要更好地支持中文字符，需要将编码设置为utf8或utf8mb4，有同学就问了什么是utf8mb4，我们来看一个小介绍：</p>
<blockquote>
<p>mysql在5.5.3之后增加了utf8mb4的字符集，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。</p>
</blockquote>
<p>为什么我们要用utf8mb4，一般来说utf8能够存下大部分的中文汉字了。原来mysql支持的utf8编码最大字符长度为3字节，如果遇到4字节的宽字符就会插入异常，4字节宽字符就是Emoji表情啦，所以utf8mb4是mysql为了兼容emoji表情而新增的一种utf8字符超集，也就是有需要支持emoji的时候将编码改为utf8mb4，不需要时正常使用utf8可以节省空间。😤😤<br>那我们要更改mysql默认的字符集应该怎样做，步骤很简单：<br>通过编辑器打开数据库配置文件/etc/my.cnf（如果发现没有这个文件时，需要执行指令<code>sudo cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</code> 将默认配置文件拷贝到etc目录下）添加语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">character-set-server=utf8</div><div class="line">collation_server=utf8_unicode_ci</div><div class="line">如果要支持utf8mb4则</div><div class="line">character-set-server=utf8mb4</div><div class="line">collation_server=utf8mb4_unicode_ci</div></pre></td></tr></table></figure></p>
<p>编辑完保存并重启mysql即可。<br>可重新进入mysql shell执行语句<code>show variables like ‘%char%’;</code>验证是否生效。</p>
<h3 id="如何彻底删除mysql"><a href="#如何彻底删除mysql" class="headerlink" title="如何彻底删除mysql"></a>如何彻底删除mysql</h3><p>打开终端，执行以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo rm /usr/local/mysql</div><div class="line">sudo rm -rf /usr/local/mysql*</div><div class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</div><div class="line">sudo rm -rf /Library/PreferencePanes/My*</div><div class="line">sudo vim /etc/hostconfig （ps：需要删除其中的MYSQLCOM=-YES-）</div><div class="line">sudo rm -rf ~/Library/PreferencePanes/My*</div><div class="line">sudo rm -rf /Library/Receipts/mysql*</div><div class="line">sudo rm -rf /Library/Receipts/MySQL*</div><div class="line">sudo rm -rf /var/db/receipts/com.mysql.*</div></pre></td></tr></table></figure></p>
<p>以上是一些mysql配置的小知识，Enjoy。</p>
]]></content>
    
    <summary type="html">
    
      之前在Mac下面安装了Mysql，很久没用后不小心忘了root密码（一直以为是123456，有点尴尬），然后以为完整删除再重装会重置密码，发现还是不行。经过一番搜索后终于找到办法，记录一下。
    
    </summary>
    
      <category term="数据库" scheme="https://tankc.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql" scheme="https://tankc.cn/tags/MySql/"/>
    
      <category term="数据库" scheme="https://tankc.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Blockly-玩具引发的血案（一）</title>
    <link href="https://tankc.cn/2017/01/16/Blockly-%E7%8E%A9%E5%85%B7%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://tankc.cn/2017/01/16/Blockly-玩具引发的血案（一）/</id>
    <published>2017-01-16T06:20:46.000Z</published>
    <updated>2017-01-16T10:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>什么是Dash机器人？</p>
</blockquote>
<p>这段时间经朋友介绍，了解了一下由 <em><a href="https://cn.makewonder.com/" target="_blank" rel="external">Wonder Workshop</a></em> 出品的风靡欧美青少年可视化编程机器人Dash&amp;Dot，该机器人在Apple Store实体店指定出售（试想能进Apple Store实体店的产品除了苹果自己的东西外能有多少就有多少），也曾经进入白宫让奥巴马跟小朋友一起玩耍，同时也被比尔盖茨太太梅琳达女士一次又一次地推荐，大概长这个样子。<br><img src="/images/blockly/dash&amp;dot.jpeg" alt="Dash&amp;Dot"><br><img src="/images/blockly/obama.jpg" alt="Obama与小朋友玩耍"><br>那么这个萌蠢萌蠢的机器人看上去就是个高级玩具啊，究竟有哪些吸引人的地方呢？<br>我在手机上安装他们的APP–Blockly把玩一番后，不禁侧目相看。机器人上面集成了各种组件像光敏感应器、麦克风、扬声器、距离感应器、机器人探测器、LED灯等，然后在APP上通过各种积木组件搭建，完成可视化编程，最后按一下开始，机器人按你预想的设定或唱歌，或跳舞，或发出各种声音…还可以通过增加外设，进行一些可扩展的编程，这对吸引青少年编程入门及培养逻辑思维都是不错的工具。<br><img src="/images/blockly/blockly_app.PNG" alt="Blockly APP"><br>那么，Dash机器人是如何实现可视化编程的？这就是我们今天的主角。</p>
<blockquote>
<p>Blockly</p>
</blockquote>
<p>查阅相关资料，发现Dash机器人APP可视化编程是通过Google开源的一个技术 <em><a href="https://developers.google.com/blockly/" target="_blank" rel="external">Blockly</a></em> 来实现的。通过Blockly，用户只需要简单地拖拉预设组件，通过拼装积木的方式构建应用程序，生成Javascript，Python，Dart，Lua等代码后，通过蓝牙或wifi传输给机器人，让机器人动态执行相应代码，最终实现通过APP来操控机器人的行为。<br><img src="/images/blockly/try_blockly.png" alt=""><br>Blockly面向Web、iOS、Android三端开放源码，同时也提供Blockly Developer Tools工具给用户自定义各种组件，允许大家通过Blockly开发各种应用场景。<br>目前通过Blockly实现面向青少年可视化编程的公司有很多，像大名鼎鼎的 <em><a href="https://code.org/" target="_blank" rel="external">Code.org</a></em>, 前面提及的 <em><a href="https://www.makewonder.com/" target="_blank" rel="external">Wonder Workshop</a></em> ，英国BBC出品面向青少年物联网编程的 <em><a href="https://www.microbit.co.uk/" target="_blank" rel="external">MicroBit</a></em> 以及国内的 <em><a href="https://www.codemao.cn/" target="_blank" rel="external">编程猫</a></em> 等。也有很多通过Blockly结合Arduino的公司，像 <em><a href="https://github.com/BlocklyDuino/BlocklyDuino" target="_blank" rel="external">BlocklyDuino</a></em>, 台湾的 <em><a href="https://webduino.io/" target="_blank" rel="external">Webduino</a></em> ，国内的 <em><a href="http://www.kenrobot.com/" target="_blank" rel="external">啃萝卜</a></em> 等，通过可视化界面生成Arduino代码让大家更容易理解硬件编程。</p>
<blockquote>
<p>后记</p>
</blockquote>
<p>好了，时间关系，今天就先介绍到这里吧，欢迎大家持续关注后续文章。<br><a href="#">Blockly-让程序跑起来（二）</a><br><a href="#">Blockly-自定义组件（三）</a><br><a href="#">Blockly-代码生成(四)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是Dash机器人？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段时间经朋友介绍，了解了一下由 &lt;em&gt;&lt;a href=&quot;https://cn.makewonder.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wo
    
    </summary>
    
      <category term="Blockly" scheme="https://tankc.cn/categories/Blockly/"/>
    
    
      <category term="Blockly" scheme="https://tankc.cn/tags/Blockly/"/>
    
      <category term="Google" scheme="https://tankc.cn/tags/Google/"/>
    
      <category term="积木编程" scheme="https://tankc.cn/tags/%E7%A7%AF%E6%9C%A8%E7%BC%96%E7%A8%8B/"/>
    
      <category term="教育" scheme="https://tankc.cn/tags/%E6%95%99%E8%82%B2/"/>
    
      <category term="Dash" scheme="https://tankc.cn/tags/Dash/"/>
    
      <category term="Dot" scheme="https://tankc.cn/tags/Dot/"/>
    
  </entry>
  
  <entry>
    <title>Markdown-忍不住爱上这写作方式</title>
    <link href="https://tankc.cn/2017/01/07/Markdown-%E5%BF%8D%E4%B8%8D%E4%BD%8F%E7%88%B1%E4%B8%8A%E8%BF%99%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
    <id>https://tankc.cn/2017/01/07/Markdown-忍不住爱上这写作方式/</id>
    <published>2017-01-07T03:02:31.000Z</published>
    <updated>2017-01-07T10:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Markdown</em> 是一种轻量级标记语言，允许人们<strong>使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(HTML)文档</strong>，现在被广泛应用于Github，Stack Overflow，简书，网易云笔记等知名网站或应用。而Hexo也默认使用Markdown来进行文章编写，写作过程淋漓畅快，而无需像传统文本编辑器那样需要设定特殊文本格式。<br>以下正式对Markdown语法进行简单介绍。</p>
<blockquote>
<p>标题</p>
</blockquote>
<p>HTML标题一般分为6级，对应为h1…h6，在Markdown中使用<em>#</em>号数来标记，如：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div></pre></td></tr></table></figure>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 二级标题</span></div></pre></td></tr></table></figure>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">### 三级标题</span></div></pre></td></tr></table></figure>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">#### 四级标题</span></div></pre></td></tr></table></figure>
<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">##### 五级标题</span></div></pre></td></tr></table></figure>
<h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">###### 六级标题</span></div></pre></td></tr></table></figure>
<blockquote>
<p>普通文本</p>
</blockquote>
<p>我是一段普通的文字，突然我<strong>加粗</strong>了，我也<strong>加粗</strong>了，然后我<em>斜</em>了，我也<em>斜</em>了<br>我是带<span style="color:#f0f">颜色</span>的字体，在markdown显示颜色需要直接使用html语法<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我是一段普通的文字，突然我<span class="strong">**加粗**</span>了，我也<span class="strong">__加粗__</span>了，然后我<span class="emphasis">*斜*</span>了，我也<span class="emphasis">_斜_</span>了</div><div class="line">我是带&lt;span style="color:#f0f"&gt;颜色&lt;/span&gt;的字体，在markdown显示颜色需要直接使用html语法</div></pre></td></tr></table></figure></p>
<blockquote>
<p>表格</p>
</blockquote>
<p>要通过Markdown来展示一个表格也是相当方便的。</p>
<table>
<thead>
<tr>
<th>标题</th>
<th>描述</th>
<th>显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>加粗</td>
<td>显示加粗文字</td>
<td><strong>我是加粗文字</strong></td>
</tr>
<tr>
<td>斜体</td>
<td>显示斜体</td>
<td><em>我是斜体</em></td>
</tr>
</tbody>
</table>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(如果表格显示无效，请加空行空行空行)</div><div class="line">|标题|描述|显示效果|</div><div class="line">|-|-|-|</div><div class="line">|加粗|显示加粗文字|<span class="strong">__我是加粗文字__</span>|</div><div class="line">|斜体|显示斜体|<span class="emphasis">_我是斜体_</span>|</div></pre></td></tr></table></figure>
<blockquote>
<p>代码标记</p>
</blockquote>
<p>代码标记估计是markdown里最出彩地方了，尤其是对程序员来说。<br>显示一段javascript代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>显示一段php代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面效果很炫，自带语法高亮，这不正是程序员的真爱吗！语法为三个上引号<strong>`</strong>后面空格+语言名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">显示一段javascript代码</div><div class="line">```javascript</div><div class="line">(function()&#123;</div><div class="line">    console.log(&quot;hello world&quot;);</div><div class="line">&#125;)();</div><div class="line">``` </div><div class="line">显示一段php代码</div><div class="line">```php</div><div class="line">function say() &#123;</div><div class="line">    echo &quot;hello world&quot;;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure></p>
<p>很方便大家分享代码。</p>
<blockquote>
<p>图片</p>
</blockquote>
<p>Hexo本地图片通常放到source/images目录里，markdown支持调用本地图片跟远程图片两种方式。<br>调用本地图片<br><img src="/images/markdown/1.gif" alt="本地小兔子玩萝卜"><br>调用远程图片<br><img src="http://tankc.cn/images/markdown/1.gif" alt="远程小兔子玩萝卜"><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">调用本地图片</div><div class="line">![<span class="string">本地小兔子玩萝卜</span>](<span class="link">/images/markdown/1.gif</span>)</div><div class="line">调用远程图片</div><div class="line">![<span class="string">远程小兔子玩萝卜</span>](<span class="link">http://tankc.cn/images/markdown/1.gif</span>)</div></pre></td></tr></table></figure></p>
<p>可以看到效果是一样的，但调用的地址是不同的。</p>
<blockquote>
<p>链接</p>
</blockquote>
<p>在markdown使用链接也非常简单，只需要把调用图片的语法基础上去掉！即可。<br>跳转到<a href="http://tankc.cn">首页</a>，跳转到<a href="/about">关于</a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">跳转到[<span class="string">首页</span>](<span class="link">http://tankc.cn</span>)，跳转到[<span class="string">关于</span>](<span class="link">/about</span>)</div></pre></td></tr></table></figure></p>
<p>除此外，还可以使用引用语法，方便使用大量链接的文本，更简洁更易懂。<br>跳转到<a href="http://tankc.cn">首页</a>，跳转到<a href="/about">关于</a></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">跳转到[<span class="string">首页</span>][<span class="symbol">1</span>]，跳转到[<span class="string">关于</span>][<span class="symbol">2</span>]</div><div class="line">[<span class="symbol">1</span>]: <span class="link">http://tankc.cn "首页"</span></div><div class="line">[<span class="symbol">2</span>]: <span class="link">/about "关于"</span></div></pre></td></tr></table></figure>
<p>那么带图片的链接<br><a href="http://tankc.cn" title="鼠标放上去显示文字"><img src="http://tankc.cn/images/markdown/1.gif" alt="首页"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![首页</span>](<span class="link">http://tankc.cn/images/markdown/1.gif</span>)](<span class="link">http://tankc.cn "鼠标放上去显示文字"</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>引用</p>
</blockquote>
<p>引用在整个文章的篇幅中占据挺多。即</p>
<blockquote>
<p>我是单行引用 </p>
</blockquote>
<p>需要换行</p>
<blockquote>
<p>我是多行引用<br>我不需要换行</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 我是单行引用 </span></div><div class="line"></div><div class="line">需要换行</div><div class="line"></div><div class="line"><span class="quote">&gt; 我是多行引用</span></div><div class="line">我不需要换行</div></pre></td></tr></table></figure>
<blockquote>
<p>列表</p>
</blockquote>
<p>列表通常有无序列表跟有序列表两种，对应HTML的ul, ol</p>
<p>无序列表</p>
<ul>
<li>前端语言<ul>
<li>javascript</li>
<li>html</li>
</ul>
</li>
<li>后端语言<ul>
<li>php</li>
<li>java</li>
</ul>
</li>
</ul>
<p>有序列表</p>
<ol>
<li>前端语言<ul>
<li>javascript</li>
<li>html</li>
</ul>
</li>
<li>后端语言<ul>
<li>php</li>
<li>java</li>
</ul>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">无序列表</div><div class="line"><span class="bullet">- </span>前端语言</div><div class="line"><span class="code">    - javascript</span></div><div class="line"><span class="code">    - html</span></div><div class="line"><span class="bullet">- </span>后端语言</div><div class="line"><span class="code">    - php</span></div><div class="line"><span class="code">    - java</span></div><div class="line"><span class="code">    </span></div><div class="line">有序列表</div><div class="line"><span class="bullet">1. </span>前端语言</div><div class="line"><span class="code">    - javascript</span></div><div class="line"><span class="code">    - html</span></div><div class="line"><span class="bullet">2. </span>后端语言</div><div class="line"><span class="code">    - php</span></div><div class="line"><span class="code">    - java</span></div></pre></td></tr></table></figure>
<p>好，写到这里差不多了，以上内容已经足够满足日常需要了，希望对你有帮助，最后以一个分隔线收尾吧。enjoy!</p>
<hr>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Markdown&lt;/em&gt; 是一种轻量级标记语言，允许人们&lt;strong&gt;使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(HTML)文档&lt;/strong&gt;，现在被广泛应用于Github，Stack Overflow，简书，网易云笔记等知名网站或应用。而
    
    </summary>
    
      <category term="杂项" scheme="https://tankc.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Markdown" scheme="https://tankc.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-快速、简洁且高效的博客框架</title>
    <link href="https://tankc.cn/2017/01/04/Hexo-%E5%BF%AB%E9%80%9F%E3%80%81%E7%AE%80%E6%B4%81%E4%B8%94%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
    <id>https://tankc.cn/2017/01/04/Hexo-快速、简洁且高效的博客框架/</id>
    <published>2017-01-04T07:23:54.000Z</published>
    <updated>2017-01-09T06:28:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>正如标题所示，Hexo是一个快速、简洁且高效的博客框架，配合Markdown使用，整个写作过程行云流水非常高效。下面将简单介绍整个Hexo博客的简易操作使用。</p>
<blockquote>
<p>环境搭建</p>
</blockquote>
<p>在使用Hexo之前需要保证本地环境是否有安装node.js和git，安装方式如下：</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>在macOS下安装node.js只需要打开<em><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">node.js</a></em>官网，点击macOS Installer下载pkg安装包，安装完后打开终端输入指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure></p>
<p>如果有返回node.js版本号(目前最新稳定版本是<em>6.9.3</em>)则表示环境已经配好，同时包管理工具<em>npm</em>也随着node.js的安装成功而安装成功。可打开终端输入以下指令进行检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>额外建议安装<em><a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a></em>或<em><a href="https://github.com/tj/n" target="_blank" rel="external">n</a></em>作为node.js的版本管理工具，可方便切换不同版本的node.js。</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>安装git可以通过<em><a href="http://brew.sh/" target="_blank" rel="external">Brew</a></em>来安装(Brew为macOS的包管理工具，类似于上面提及的node.js包管理工具nvm/n，如果没有安装Brew可参考其官网指令安装)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install git</div></pre></td></tr></table></figure></p>
<p>也可以直接下载<em><a href="https://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">git</a></em>的pkg包进行安装，安装完打开终端输入指令进行检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>待node.js及Git工具配置好，我们终于可以开始安装Hexo了，只需要一行命令即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<blockquote>
<p>github配置</p>
</blockquote>
<p>Hexo最终生成静态页面需要在站点上呈现，我们可以通过自己租赁服务器进行部署，当然有更简单的方式，那就是直接上传到github，并通过<em><a href="https://pages.github.com/" target="_blank" rel="external">github page</a></em>的魔法来展示。<br>首先登录github(没账号自行注册吧)，然后创建新仓库<br><img src="/images/hexo/1.png" alt=""><br>输入你的站点名，如hexo.github.io，则以后可直接通过<a href="https://hexo.github.io" target="_blank" rel="external">https://hexo.github.io</a> 来访问<br><img src="/images/hexo/2.png" alt=""><br>说了那么多，还没进入主题。现在一切准备工作就绪，可以正式开始Hexo的旅程了。</p>
<blockquote>
<p>Hexo使用</p>
</blockquote>
<h3 id="初始化Hexo目录"><a href="#初始化Hexo目录" class="headerlink" title="初始化Hexo目录"></a>初始化Hexo目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span>  <span class="comment"># 进入用户当前目录</span></div><div class="line">$ hexo init HexoB<span class="built_in">log</span>  <span class="comment"># 在当前目录初始化HexoBlog，并从github下载默认主题landscape及相关依赖，经过一段时间等待后，目录创建成功</span></div><div class="line">$ <span class="built_in">cd</span> HexoB<span class="built_in">log</span> <span class="comment"># 进入HexoBlog目录</span></div><div class="line">$ npm install <span class="comment"># 安装剩余部分</span></div></pre></td></tr></table></figure>
<p>安装完毕，查看HexoBlog目录大至有以下几个文件  </p>
<table>
<thead>
<tr>
<th>目录/文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>_config.yml</td>
<td>网站配置信息,包括标题、描述、语言、主题、路由配置、github部署信息等基本相关相信都可以在这里进行配置</td>
</tr>
<tr>
<td>package.json</td>
<td>应用程序信息</td>
</tr>
<tr>
<td>scaffolds</td>
<td>创建模板，默认有draft、page、post三种，也可以创建自己的模板，执行hexo new的时候可指定</td>
</tr>
<tr>
<td>source</td>
<td>资源目录，生成时_posts目录会被解析到public里面，而其他像_drafts则会被忽略，本地图片资源也放到此目录</td>
</tr>
<tr>
<td>themes</td>
<td>主题目录，默认主题为landscape，而其他主题也会默认装到这个目录</td>
</tr>
</tbody>
</table>
<p><em>小技巧</em>：Hexo生成的目录可当成一个node.js的项目，通过VSCode，Sublime Text，WebStorm等工具来管理项目将会变得非常的方便，如：<br><img src="/images/hexo/3.png" alt=""></p>
<h3 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h3><p>一般安装好后，简单配置_config.yml信息，就可以直接运行Hexo，打开终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/HexoB<span class="built_in">log</span></div><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>如果没有异常的话，终端提示Hexo默认启动端口为4000的HTTP服务，此时你可以访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ，默认会有一篇hello world的文章</p>
<h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>layout为创建文件的模板，默认有三种形式，post, page, draft，可自定义模板存储到scaffolds目录里，如果是自定义的layout默认为post方式，建立的文章会存储到source/_posts里面。<br>如，创建一篇新文章，执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post Hexo-快速、简洁且高效的博客框架</div></pre></td></tr></table></figure></p>
<p>执行成功后在source/_posts目录里会有一个文件名为『Hexo-快速、简洁且高效的博客框架.md』的Markdown文件，由于默认使用scaffolds/post.md模板，则默认生成内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo-快速、简洁且高效的博客框架</div><div class="line">date: 2017-01-05 09:20:51</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>通过编辑器打开这个文件进行编辑即可。</p>
<h3 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h3><p>layout如果为draft则表示草稿箱，默认不发布，建立的文章会存储到source/_draft目录里，待要发布时，直接执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft &lt;title&gt;</div><div class="line">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>生成与部署</p>
</blockquote>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>Hexo部署到服务器或github首先需要生成静态文件，默认静态文件会生成到public里，执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>待静态文件生成完毕，打开配置文件_config.yml，找到deploy部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 你的github仓库地址，类似：https://www.github.com/YourName/hexo.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>配置完成，执行指令，等待片刻即可上传到github：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<h3 id="组合部署"><a href="#组合部署" class="headerlink" title="组合部署"></a>组合部署</h3><p>可以将生成静态文件跟部署结合使用，执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="_">-d</span> <span class="comment"># 相当于hexo generate --deploy</span></div><div class="line"><span class="comment"># 或</span></div><div class="line">$ hexo d -g <span class="comment"># 相当于hexo deploy --generate</span></div></pre></td></tr></table></figure></p>
<p>ok，通过以上操作，你尝试访问一下<a href="https://hexo.github.io" target="_blank" rel="external">https://hexo.github.io</a> 一个属于你的blog系统就已经搭建好了。enjoy!</p>
<p><em>&lt;预告&gt;</em> 下一篇将介绍Hexo的写作语法Markdown：<a href="http://tankc.cn/2017/01/07/Markdown-%E5%BF%8D%E4%B8%8D%E4%BD%8F%E7%88%B1%E4%B8%8A%E8%BF%99%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/">Markdown-忍不住爱上这写作方式</a> 敬请关注^O^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正如标题所示，Hexo是一个快速、简洁且高效的博客框架，配合Markdown使用，整个写作过程行云流水非常高效。下面将简单介绍整个Hexo博客的简易操作使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;环境搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在使用Hexo之前需要
    
    </summary>
    
      <category term="杂项" scheme="https://tankc.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Hexo" scheme="https://tankc.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
