<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tank&#39;s C</title>
  
  <subtitle>来啊，快活啊，反正有大把时光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tankc.cn/"/>
  <updated>2018-08-26T13:21:30.890Z</updated>
  <id>https://tankc.cn/</id>
  
  <author>
    <name>Tank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular（二）模板语法</title>
    <link href="https://tankc.cn/2018/08/26/Angular%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <id>https://tankc.cn/2018/08/26/Angular（二）模板语法/</id>
    <published>2018-08-26T08:43:32.000Z</published>
    <updated>2018-08-26T13:21:30.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在架构概览中已经简单介绍了模板的一些操作，模板是Angular组件的重要组成部分，主要负责显示dom，插值表达式，管道，属性绑定，事件绑定，子组件占位，指令操作等。</p></blockquote><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>插值表达式主要用于将计算后的表达式字符串插入到HTML元素标签的文本或属性进行赋值，用两个大括号表示，括号间是一个模板表达式，Angular对它先求值，再转换成字符串。<br>模板表达式里面可以有很多Javascript的表达式，但一些可能引发副作用的表达式是被禁止的，如：</p><ul><li>赋值(=, +=, -=, …, ++, –)</li><li>new运算符</li><li>使用;或,的链式表达式</li><li>不支持位运算|和&amp;</li></ul><p>下面是插值表达式的各种操作示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; imageUrl &#125;&#125;"</span>&#125;&#125; <span class="attr">alt</span>=<span class="string">"&#123;&#123;imageTitle&#125;&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url + imagePath &#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- generateImageUrl()必须是组件中定义的方法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; generateImageUrl(imagePath) &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="表达式上下文"><a href="#表达式上下文" class="headerlink" title="表达式上下文"></a>表达式上下文</h3><p>默认情况下，表达式的上下文都是这个组件的实例，它是各种绑定值的来源，如上面的imageUrl就是组件定义的属性。除了组件外，模板输入变量(let hero)和模板引用变量(#heroInput)也是备选的上下文对象之一。<br>模板表达式不能引用全局命名空间中的任何东西，如window或document，也不能调用console.log或Math.max，只能引用表达式上下文中的成员。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">heroInput</span>&gt;</span> &#123;&#123;heroInput.value&#125;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="模板语句"><a href="#模板语句" class="headerlink" title="模板语句"></a>模板语句</h3><p>模板语句用来响应由绑定目标(如HTML元素、组件或指令)触发的事件，如<em>(event)=”statement”</em>。语句只能引用语句上下文对应的组件实例或模板自身上下文中的属性。注意下面例子中的$event, let hero, #heroForm变量传给组件事件处理器的方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onSave($event)"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span> (<span class="attr">click</span>)=<span class="string">"deleteHero(hero)"</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">heroForm</span> (<span class="attr">ngSubmit</span>)=<span class="string">"onSubmit(heroForm)"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>绑定的类型根据数据流的方向分为三类：从组件到视图、从视图到组件及从组件到视图再到组件。  </p><ul><li><p>从组件到视图，绑定类型主要有插值表达式、属性、Attribute、CSS类、样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; expression &#125;&#125;</span><br><span class="line">[target]=<span class="string">"expression"</span></span><br><span class="line">bind-target=<span class="string">"expression"</span></span><br></pre></td></tr></table></figure></li><li><p>从视图到组件，绑定类型为事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(target)=<span class="string">"statement"</span></span><br><span class="line">on-target=<span class="string">"statement"</span></span><br></pre></td></tr></table></figure></li><li><p>从组件到视图再到组件（双向绑定）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(target)]=<span class="string">"expression"</span></span><br><span class="line">bindon-targt=<span class="string">"expression"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="绑定目标"><a href="#绑定目标" class="headerlink" title="绑定目标"></a>绑定目标</h3><ul><li><p>属性绑定，目标主要为元素的属性、组件的属性和指令的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">"imageUrl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父组件给子组件传值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-detail</span> [<span class="attr">id</span>]=<span class="string">"detailId"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'special': isSpecial&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事件绑定，目标主要为元素的事件，组件的事件和指令的事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onSave()"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on-click</span>=<span class="string">"onSave()"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子组件跟父组件事件通讯--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-detail</span> (<span class="attr">deleteReq</span>)=<span class="string">"delete()"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> (<span class="attr">myClick</span>)=<span class="string">"clicked=$event"</span> <span class="attr">clickable</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>双向绑定，目标为事件与属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"name"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Attribute绑定，格式为[attr.attrName]，当元素没有属性可绑的时候，就必须使用这种绑定方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> [<span class="attr">attr.aria-label</span>=<span class="string">"help"</span>&gt;</span>help<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> [<span class="attr">attr.colspan</span>]=<span class="string">"1+1"</span>&gt;</span>合并单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Table<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS类绑定，格式为[class.class-name]，可以在css attrubite上添加或移除css类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.special</span>]&gt;</span>="isSpecial"&gt;Special<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>样式绑定，格式为[style.style-property]，如果带单位，则直接在style-property后面添加单位名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> [<span class="attr">style.font.</span>%]=<span class="string">"isSpecial ? 150 : 50"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> [<span class="attr">style.background-color</span>]=<span class="string">"isSpecial ? 'red' : 'green'"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="属性指令"><a href="#属性指令" class="headerlink" title="属性指令"></a>属性指令</h4><p>属性指令会监听和修改其他HTML元素或组件的行为、元素属性、DOM属性。Angular常用的属性指令：</p><ul><li><p>NgClass，添加或移除一组CSS类，绑定一个key:value形式的控制对象，这个对象的每个key对应一个css类名，如果值为true则返回，否则移除</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单个CSS类处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.special</span>]=<span class="string">"isSpecial"</span>&gt;</span>Special<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多个CSS类处理--&gt;</span></span><br><span class="line">currentClasses: &#123;&#125;,</span><br><span class="line">setCurrentClasses() &#123;</span><br><span class="line">  this.currentClasses = &#123;</span><br><span class="line">    'saveable': this.canSave,</span><br><span class="line">    'modified': !this.isUnchanged,</span><br><span class="line">    'special': this.isSpecial</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">"currentClasses"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>NgStyle，添加或移除一组CSS样式 ，绑定一个key:value控制对象，对象的key为样式名，value则根据判断返回对应的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单个Style样式处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">style.font-size</span>]=<span class="string">"isSpecial"</span> ? '<span class="attr">x-large</span>' <span class="attr">:</span> '<span class="attr">smaller</span>'&gt;</span>Special<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多个Style样式处理--&gt;</span></span><br><span class="line">currentStylies: &#123;&#125;,</span><br><span class="line">setCurrentStylies() &#123;</span><br><span class="line">  this.currentStylies = &#123;</span><br><span class="line">    'font-style': this.canSave ? 'italic' : 'normal',</span><br><span class="line">    'font-weight': !this.isUnchanged ? 'bold' : 'normal',</span><br><span class="line">    'font-size': this.isSpecial ? '24px' : '12px'</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>]=<span class="string">"currentStylies"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>NgModel，双向绑定到HTML表单元素，使用ngModel需要导入FormsModule到模块的imports列表中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"currentValue"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> [<span class="attr">value</span>]=<span class="string">"currentValue"</span> (<span class="attr">input</span>)=<span class="string">"currentValue=$event.target.value"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="结构指令"><a href="#结构指令" class="headerlink" title="结构指令"></a>结构指令</h4><p>结构指令的职责是HTML布局，通过添加、移除和操纵它们所附加到宿主元素来实现。常用的结构指令：</p><ul><li><p>NgIf，根据条件把一个元素添加到DOM或从DOM移除，除此之外，ngIf还通常用来防止空指针，假如需要显示的数据来自网络，初始化DOM的时候数据还没有及时返回，此时直接调用该属性会抛出异常，如果通过ngIf来提前判断，则可以防范此类事件发生</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-detail</span> *<span class="attr">ngIf</span>=<span class="string">"isActive"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"currentHero"</span>&gt;</span>&#123;&#123;currentHero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>NgSwitch，一组指令，用来在多个可选视图之间切换，实际上它是由三个相互协作的指令：NgSwitch, NgSwitchCase和NgSwitchDefault组合而成，注意ngSwitch是一个属性指令而不是结构指令，因为它不会修改DOM结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">"currentApp.name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-happy</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'happy'"</span> [<span class="attr">app</span>]=<span class="string">"currentApp"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-happy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-sad</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'sad'"</span> [<span class="attr">app</span>]=<span class="string">"currentApp"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sad</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-unknown</span> *<span class="attr">ngSwitchDefault</span> [<span class="attr">app</span>]=<span class="string">"currentApp"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-unknown</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>NgFor，对列表中每个条目重复套用同一个模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// 带索引</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes; let i=index"</span>&gt;</span>&#123;&#123;i + 1&#125;&#125; - &#123;&#123; hero.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="模板引用变量"><a href="#模板引用变量" class="headerlink" title="模板引用变量"></a>模板引用变量</h3><p>模板引用变量通常用来引用模板中的某个dom元素，使用#来声明，然后在整个模板的任意位置都可以引用该变量<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">"phone number"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"callPhone(phone.value)"</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="输入输出属性"><a href="#输入输出属性" class="headerlink" title="输入输出属性"></a>输入输出属性</h3><ul><li>@Input([optionalName])，输入属性，当组件selector通过属性绑定时，值会流入这个声明属性，用于父组件向子组件传值</li><li>@Output([optionalName])，输出属性，返回一个EventEmitter对象，当组件selector通过事件绑定的形式绑定时，值会流出这个声明属性，用于子组件向父组件传值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app-detail.component.ts</span></span><br><span class="line">@Input() id: number;</span><br><span class="line">@Output() deleteRequest = <span class="keyword">new</span> EventEmitter&lt;Detail&gt;();</span><br><span class="line"><span class="comment">// 也可以直接在@Component装饰器里声明</span></span><br><span class="line">@Component(&#123;</span><br><span class="line">  inputs: [<span class="string">'hero'</span>],</span><br><span class="line">  outputs: [<span class="string">'deleteRequest'</span>],</span><br><span class="line">&#125;)</span><br><span class="line">detail: Detail;</span><br><span class="line">...</span><br><span class="line">onDelete() &#123;</span><br><span class="line">  <span class="keyword">this</span>.deleteRequest.emit(<span class="keyword">this</span>.detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app-detail.component.html</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;&#123; detail.name &#125;&#125;</span><br><span class="line">  &lt;button (click)=<span class="string">"onDelete()"</span>&gt;删除&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.component.html</span></span><br><span class="line">&lt;app-detail [id]=<span class="string">"appId"</span> (deleteRequest)=<span class="string">"delete($event)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">app-detail</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// app.component.ts</span></span><br><span class="line"><span class="xml">appId: number = 1;</span></span><br><span class="line"><span class="xml">delete(Detail) &#123;</span></span><br><span class="line"><span class="xml">  // 处理事件</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道是一个简单的函数，接受一个输入值并返回转换的结果，通过管道操作符(|)来使用，多个管道使用串联的表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123; title | uppercase | lowercase &#125;&#125;</span><br><span class="line">  &#123;&#123; birthday | date:'longDate' &#125;&#125;</span><br><span class="line">  &#123;&#123; currentApp?.detail | json &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="安全操作"><a href="#安全操作" class="headerlink" title="安全操作"></a>安全操作</h3><ul><li>?，安全导航操作符，在模板中使用对象时，若对象为空时，直接调用对象会抛出异常，可以通过安全导航的形式来避免页面出错</li><li>*ngIf，上面已经介绍过类似的处理</li><li>!，非空断言操作符，已经知道当前对象肯定有值，如在*ngIf后已经判断过，则可直接使用</li></ul><p>模板涉及的知识点有点多，但用法相对也比较简单，在代码中多注意其用法即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在架构概览中已经简单介绍了模板的一些操作，模板是Angular组件的重要组成部分，主要负责显示dom，插值表达式，管道，属性绑定，事件绑定，子组件占位，指令操作等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;插值表达式&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Angular" scheme="https://tankc.cn/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://tankc.cn/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular（一）架构概览</title>
    <link href="https://tankc.cn/2018/08/26/Angular%EF%BC%88%E4%B8%80%EF%BC%89%E6%9E%B6%E6%9E%84%E6%A6%82%E8%A7%88/"/>
    <id>https://tankc.cn/2018/08/26/Angular（一）架构概览/</id>
    <published>2018-08-26T04:58:40.000Z</published>
    <updated>2018-08-26T13:24:29.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于公司项目需要，使用到了Angular，所以通过学习Angular并将相关笔记整理到博客，方便日后查阅。所有笔记内容均来自于<a href="https://angular.cn/guide" target="_blank" rel="noopener">Angular教程</a>，下面正式开始学习。  </p></blockquote><p>Angular是一个用HTML和TypeScript构建客户端应用的平台与框架，所以在学习Angular之前需要掌握一些<a href="https://www.tslang.cn/" target="_blank" rel="noopener">TypeScript</a>和<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6</a>的语法。 </p><blockquote><p>安装</p></blockquote><ol><li>Angular CLI是官方提供的一站式工具，可以用来创建项目、添加文件及执行一大堆的开发任务，如测试、打包和发布等。</li><li>建议nodejs版本在8.x以上，而npm在5.x以上（由于国内墙的原因，建议使用yarn或cnpm来替代npm）</li><li>通过ng new来创建项目的时候，默认会通过npm自动安装依赖包，过程可能会很慢，所以建议加入参数–no-install来跳过，然后再通过执行yarn来安装</li><li>服务器成功启动会打开浏览器并访问<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">``` javascript</span><br><span class="line">npm install -g @angular/cli     </span><br><span class="line">ng new my-app --no-install</span><br><span class="line">cd my-app</span><br><span class="line">yarn</span><br><span class="line">ng serve --open</span><br><span class="line"></span><br><span class="line">// 生成器</span><br><span class="line">ng generate</span><br><span class="line">-&gt; cl:class</span><br><span class="line">-&gt; c:component</span><br><span class="line">-&gt; d:directive</span><br><span class="line">-&gt; e:enum</span><br><span class="line">-&gt; m:module</span><br><span class="line">-&gt; p:pipe</span><br><span class="line">-&gt; s:servide</span><br><span class="line">// 命令可简化成：ng g c User</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>项目架构</p></blockquote><p>先通过一张官方提供的架构图来说明Angular的整体框架结构。<br><img src="https://angular.cn/generated/images/guide/architecture/overview2.png" alt="Angular架构"><br>此架构图展示了Angular的主要构造块：  </p><ol><li>模块(module)</li><li>组件(component)</li><li>模板(template)</li><li>元数据(metadata)</li><li>数据绑定(binding)</li><li>指令(directive)</li><li>服务(service)</li><li>依赖注入(injection)</li></ol><p>这些构造块之间有哪些关联，下面逐一讲解。  </p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块由<em>@NgModule</em>装饰，它将各个组件和服务等关联起来，形成功能单元。每个Angular应用都有一个根模块，通常命名为<em>AppModule</em>。根模块提供了用来启动应用的引导机制，一个应用通常会包含很多功能模块。<br>默认的AppModule代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [ AppComponent ],</span><br><span class="line">  imports: [ BrowserModule ],</span><br><span class="line">  exports: [ AppCompont ],</span><br><span class="line">  providers: [ Logger ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><ul><li>declarations(可声明对象表)，声明本模块中拥有的视图类，包括：组件、指令和管道</li><li>imports(导入表)，本模块声明的组件中所需要使用到的类所在的其他模块，默认BrowserModule表示浏览器需要的模块，类似还有FormsModule, HttpModule等</li><li>exports(导出表)，可用于其他模板使用的组件模板</li><li>providers，依赖服务类，在此声明则全局可用</li><li>bootstrap，指定应用的主视图，只有根模块可设置此属性</li></ul><h3 id="组件、模板、元数据及数据绑定"><a href="#组件、模板、元数据及数据绑定" class="headerlink" title="组件、模板、元数据及数据绑定"></a>组件、模板、元数据及数据绑定</h3><p>普通的JS类，通过组件通过装饰器<em>@Component</em>修饰后变成组件，每个Angular应用至少有一个组件，也就是根组件，它会把组件树和页面中的DOM连接起来。其中组件的声明会包含模板和元数据，而在模板中，指令会提供程序逻辑，而数据绑定则将应用中的数据和DOM连接在一起。<br>组件示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>],</span><br><span class="line">  providers: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  title = <span class="string">'myapp'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>selector，CSS选择器，一旦在模板HTML中找到这个选择器对应的标签，就创建并插入该组件的一个实例，如在项目的index.html中有<app-root></app-root>，Angular会在这个页面中插入AppComponent实例的视图</li><li>templateUrl，当前组件对应的模板HTML路径，如果为template则直接写HTML字符串，可以在模板中写入其他子组件的selector来进行组件内嵌</li><li>styleUrls，当前组件对应的CSS样式地址，如果为styles则直接写CSS字符串</li><li>providers，当前组件使用的注入服务</li><li>metadata，元数据则是在组件类中定义的一些变量，可以通过@Input()，@Output()等进行装饰</li></ul><p>数据绑定主要有以下四种表现：<br><img src="https://angular.cn/generated/images/guide/architecture/databinding.png" alt="数据绑定"><br>需要注意的是数据绑定在模板及组件之间的通讯扮演了非常重要的角色，在父组件和子组件之间的通讯也同样重要。<br><img src="https://angular.cn/generated/images/guide/architecture/parent-child-binding.png" alt="数据通讯"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// app.component.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    Welcome to &#123;&#123; title &#125;&#125;!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngIf</span>=<span class="string">"datas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let data of datas"</span> (<span class="attr">click</span>)=<span class="string">"selectData(data)"</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-detail</span> [<span class="attr">id</span>]=<span class="string">"detailId"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>{{ title }}表示一个插值表达式，为单向绑定，方向是组件-&gt;模板</li><li>[id]表示一个属性绑定，在这里表示父组件传递id给子组件，方向是组件-&gt;模板</li><li>(click)表示事件绑定，相关事件在组件中的实现，方向是模板-&gt;组件</li><li>[(ngModel)]表示双向绑定，方向是组件<->模板</-></li><li>{{ title | uppercase }}表示管道，管道是简单处理模板显示逻辑，通过一个<em>@Pipe</em>的装饰器来定义，使用时通过管道操作符|来进行操作，多个管道通过多个|进行分隔</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令是通过<em>@Directive</em>装饰的类，从技术角度来说，组件也是指令的一种。指令的元数据把指令类和一个selector关联起来，在模板中，指令通常作为属性出现在元素标签上，可能仅作为名字，也可能作为赋值目标或绑定目标出现，指令分为两种：</p><ul><li>结构型指令，通过添加、移除或替换DOM元素来修改布局，如上面例子中的*ngIf和*ngFor</li><li>属性型指令，用来修改现有元素的外观和行为，在模板中，看起来跟普通HTML属性一样，如上面例子中的<em>[(ngModel)]</em>，Angular还提供了很多预定义指令，如<em>ngSwitch, ngStyle, ngClass</em>等</li></ul><h3 id="服务和依赖注入"><a href="#服务和依赖注入" class="headerlink" title="服务和依赖注入"></a>服务和依赖注入</h3><p>为提高模块性和复用性，Angular把组件和服务区分开。组件的工作最好只管用户体验，提供数据绑定需要的属性和方法，组件不应该从服务器中获取数据、验证用户输入或从控制台中写日志等。而要把这些任务委托给各种服务，并通过注入的形式来供组件使用。<br>服务类通过<em>@Injectable</em>来装饰，并通过模板或组件中的providers属性将服务作为依赖注入到客户组件中。<br>以下通过<em>ng g s data</em>生成一个服务类。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoggerService &#125; <span class="keyword">from</span> <span class="string">'./logger.service'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DataService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(private logger: LoggerService) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>服务类也可以通过注入其他服务来复用其相关功能，如日志类，通过在构造函数中声明实例则可以直接在数据服务类里使用日志的功能 </li><li>providedIn把当前服务注册到根注入器中</li><li>在NgModule中注册服务时，表示整个模块下的所有组件均可用该服务，而在组件中注册服务时，则表示只能在该组件及其子组件中能使用该服务</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>由于Angular是一个单页面应用，有时需要在不同的组件之间进行切换，这时就需要涉及到路由。它可以让定义在应用的各个不同状态和视图层次结构之间进行导航切换，它的工作模型跟现在大家熟知的浏览器导航一致：</p><ul><li>在地址栏输入URL，浏览器会导航到相应的组件</li><li>在页面中点击链接，浏览器会导航到相应的组件</li><li>在浏览器中前进后退，也会在相应的浏览历史中进行向前或向后导航</li></ul><p>路由的定义如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ng g m app-routing --flat --module=app</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: AppComponent &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'home'</span>, <span class="attr">component</span>: AppComponent &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  exports: [ RouterModule ],</span><br><span class="line">  imports: [ RouterModule.forRoot(routes) ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><ul><li>声明一个路由模块并把它加入到AppModule中</li></ul><p>架构部分就差不多到这里。接下来是更具体的细节部分的学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于公司项目需要，使用到了Angular，所以通过学习Angular并将相关笔记整理到博客，方便日后查阅。所有笔记内容均来自于&lt;a href=&quot;https://angular.cn/guide&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="Angular" scheme="https://tankc.cn/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://tankc.cn/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Markdown-忍不住爱上这写作方式</title>
    <link href="https://tankc.cn/2017/01/07/Markdown-%E5%BF%8D%E4%B8%8D%E4%BD%8F%E7%88%B1%E4%B8%8A%E8%BF%99%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
    <id>https://tankc.cn/2017/01/07/Markdown-忍不住爱上这写作方式/</id>
    <published>2017-01-07T03:02:31.000Z</published>
    <updated>2017-01-07T10:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Markdown</em> 是一种轻量级标记语言，允许人们<strong>使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(HTML)文档</strong>，现在被广泛应用于Github，Stack Overflow，简书，网易云笔记等知名网站或应用。而Hexo也默认使用Markdown来进行文章编写，写作过程淋漓畅快，而无需像传统文本编辑器那样需要设定特殊文本格式。<br>以下正式对Markdown语法进行简单介绍。</p><blockquote><p>标题</p></blockquote><p>HTML标题一般分为6级，对应为h1…h6，在Markdown中使用<em>#</em>号数来标记，如：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br></pre></td></tr></table></figure><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 二级标题</span></span><br></pre></td></tr></table></figure><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#### 四级标题</span></span><br></pre></td></tr></table></figure><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">##### 五级标题</span></span><br></pre></td></tr></table></figure><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><blockquote><p>普通文本</p></blockquote><p>我是一段普通的文字，突然我<strong>加粗</strong>了，我也<strong>加粗</strong>了，然后我<em>斜</em>了，我也_斜_了<br>我是带<span style="color:#f0f">颜色</span>的字体，在markdown显示颜色需要直接使用html语法<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是一段普通的文字，突然我<span class="strong">**加粗**</span>了，我也<span class="strong">__加粗__</span>了，然后我<span class="emphasis">*斜*</span>了，我也<span class="emphasis">_斜_</span>了</span><br><span class="line">我是带&lt;span style="color:#f0f"&gt;颜色&lt;/span&gt;的字体，在markdown显示颜色需要直接使用html语法</span><br></pre></td></tr></table></figure></p><blockquote><p>表格</p></blockquote><p>要通过Markdown来展示一个表格也是相当方便的。</p><table><thead><tr><th>标题</th><th>描述</th><th>显示效果</th></tr></thead><tbody><tr><td>加粗</td><td>显示加粗文字</td><td><strong>我是加粗文字</strong></td></tr><tr><td>斜体</td><td>显示斜体</td><td><em>我是斜体</em></td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(如果表格显示无效，请加空行空行空行)</span><br><span class="line">|标题|描述|显示效果|</span><br><span class="line">|-|-|-|</span><br><span class="line">|加粗|显示加粗文字|<span class="strong">__我是加粗文字__</span>|</span><br><span class="line">|斜体|显示斜体|<span class="emphasis">_我是斜体_</span>|</span><br></pre></td></tr></table></figure><blockquote><p>代码标记</p></blockquote><p>代码标记估计是markdown里最出彩地方了，尤其是对程序员来说。<br>显示一段javascript代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>显示一段php代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面效果很炫，自带语法高亮，这不正是程序员的真爱吗！语法为三个上引号<strong>`</strong>后面空格+语言名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">显示一段javascript代码</span><br><span class="line">```javascript</span><br><span class="line">(function()&#123;</span><br><span class="line">    console.log(&quot;hello world&quot;);</span><br><span class="line">&#125;)();</span><br><span class="line">``` </span><br><span class="line">显示一段php代码</span><br><span class="line">```php</span><br><span class="line">function say() &#123;</span><br><span class="line">    echo &quot;hello world&quot;;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></p><p>很方便大家分享代码。</p><blockquote><p>图片</p></blockquote><p>Hexo本地图片通常放到source/images目录里，markdown支持调用本地图片跟远程图片两种方式。<br>调用本地图片<br><img src="/images/markdown/1.gif" alt="本地小兔子玩萝卜"><br>调用远程图片<br><img src="http://tankc.cn/images/markdown/1.gif" alt="远程小兔子玩萝卜"><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用本地图片</span><br><span class="line">![<span class="string">本地小兔子玩萝卜</span>](<span class="link">/images/markdown/1.gif</span>)</span><br><span class="line">调用远程图片</span><br><span class="line">![<span class="string">远程小兔子玩萝卜</span>](<span class="link">http://tankc.cn/images/markdown/1.gif</span>)</span><br></pre></td></tr></table></figure></p><p>可以看到效果是一样的，但调用的地址是不同的。</p><blockquote><p>链接</p></blockquote><p>在markdown使用链接也非常简单，只需要把调用图片的语法基础上去掉！即可。<br>跳转到<a href="http://tankc.cn">首页</a>，跳转到<a href="/about">关于</a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跳转到[<span class="string">首页</span>](<span class="link">http://tankc.cn</span>)，跳转到[<span class="string">关于</span>](<span class="link">/about</span>)</span><br></pre></td></tr></table></figure></p><p>除此外，还可以使用引用语法，方便使用大量链接的文本，更简洁更易懂。<br>跳转到[首页][1]，跳转到[关于][2]<br>[1]: <a href="http://tankc.cn">http://tankc.cn</a><br>[2]: /about<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跳转到[<span class="string">首页</span>][<span class="symbol">1</span>]，跳转到[<span class="string">关于</span>][<span class="symbol">2</span>]</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://tankc.cn "首页"</span></span><br><span class="line">[<span class="symbol">2</span>]: <span class="link">/about "关于"</span></span><br></pre></td></tr></table></figure></p><p>那么带图片的链接<br><a href="http://tankc.cn" title="鼠标放上去显示文字"><img src="http://tankc.cn/images/markdown/1.gif" alt="首页"></a><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![首页</span>](<span class="link">http://tankc.cn/images/markdown/1.gif</span>)](<span class="link">http://tankc.cn "鼠标放上去显示文字"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>引用</p></blockquote><p>引用在整个文章的篇幅中占据挺多。即</p><blockquote><p>我是单行引用 </p></blockquote><p>需要换行</p><blockquote><p>我是多行引用<br>我不需要换行</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 我是单行引用 </span></span><br><span class="line"></span><br><span class="line">需要换行</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 我是多行引用</span></span><br><span class="line">我不需要换行</span><br></pre></td></tr></table></figure><blockquote><p>列表</p></blockquote><p>列表通常有无序列表跟有序列表两种，对应HTML的ul, ol</p><p>无序列表</p><ul><li>前端语言<ul><li>javascript</li><li>html</li></ul></li><li>后端语言<ul><li>php</li><li>java</li></ul></li></ul><p>有序列表</p><ol><li>前端语言<ul><li>javascript</li><li>html</li></ul></li><li>后端语言<ul><li>php</li><li>java</li></ul></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line"><span class="bullet">- </span>前端语言</span><br><span class="line"><span class="code">    - javascript</span></span><br><span class="line"><span class="code">    - html</span></span><br><span class="line"><span class="bullet">- </span>后端语言</span><br><span class="line"><span class="code">    - php</span></span><br><span class="line"><span class="code">    - java</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">有序列表</span><br><span class="line"><span class="bullet">1. </span>前端语言</span><br><span class="line"><span class="code">    - javascript</span></span><br><span class="line"><span class="code">    - html</span></span><br><span class="line"><span class="bullet">2. </span>后端语言</span><br><span class="line"><span class="code">    - php</span></span><br><span class="line"><span class="code">    - java</span></span><br></pre></td></tr></table></figure><p>好，写到这里差不多了，以上内容已经足够满足日常需要了，希望对你有帮助，最后以一个分隔线收尾吧。enjoy!</p><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Markdown&lt;/em&gt; 是一种轻量级标记语言，允许人们&lt;strong&gt;使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(HTML)文档&lt;/strong&gt;，现在被广泛应用于Github，Stack Overflow，简书，网易云笔记等知名网站或应用。而
      
    
    </summary>
    
      <category term="杂项" scheme="https://tankc.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Markdown" scheme="https://tankc.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-快速、简洁且高效的博客框架</title>
    <link href="https://tankc.cn/2017/01/04/Hexo-%E5%BF%AB%E9%80%9F%E3%80%81%E7%AE%80%E6%B4%81%E4%B8%94%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
    <id>https://tankc.cn/2017/01/04/Hexo-快速、简洁且高效的博客框架/</id>
    <published>2017-01-04T07:23:54.000Z</published>
    <updated>2017-01-09T06:28:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>正如标题所示，Hexo是一个快速、简洁且高效的博客框架，配合Markdown使用，整个写作过程行云流水非常高效。下面将简单介绍整个Hexo博客的简易操作使用。</p><blockquote><p>环境搭建</p></blockquote><p>在使用Hexo之前需要保证本地环境是否有安装node.js和git，安装方式如下：</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>在macOS下安装node.js只需要打开<em><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">node.js</a></em>官网，点击macOS Installer下载pkg安装包，安装完后打开终端输入指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><p>如果有返回node.js版本号(目前最新稳定版本是<em>6.9.3</em>)则表示环境已经配好，同时包管理工具<em>npm</em>也随着node.js的安装成功而安装成功。可打开终端输入以下指令进行检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><p>额外建议安装<em><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a></em>或<em><a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a></em>作为node.js的版本管理工具，可方便切换不同版本的node.js。</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>安装git可以通过<em><a href="http://brew.sh/" target="_blank" rel="noopener">Brew</a></em>来安装(Brew为macOS的包管理工具，类似于上面提及的node.js包管理工具nvm/n，如果没有安装Brew可参考其官网指令安装)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></p><p>也可以直接下载<em><a href="https://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">git</a></em>的pkg包进行安装，安装完打开终端输入指令进行检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>待node.js及Git工具配置好，我们终于可以开始安装Hexo了，只需要一行命令即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><blockquote><p>github配置</p></blockquote><p>Hexo最终生成静态页面需要在站点上呈现，我们可以通过自己租赁服务器进行部署，当然有更简单的方式，那就是直接上传到github，并通过<em><a href="https://pages.github.com/" target="_blank" rel="noopener">github page</a></em>的魔法来展示。<br>首先登录github(没账号自行注册吧)，然后创建新仓库<br><img src="/images/hexo/1.png" alt=""><br>输入你的站点名，如hexo.github.io，则以后可直接通过<a href="https://hexo.github.io" target="_blank" rel="noopener">https://hexo.github.io</a> 来访问<br><img src="/images/hexo/2.png" alt=""><br>说了那么多，还没进入主题。现在一切准备工作就绪，可以正式开始Hexo的旅程了。</p><blockquote><p>Hexo使用</p></blockquote><h3 id="初始化Hexo目录"><a href="#初始化Hexo目录" class="headerlink" title="初始化Hexo目录"></a>初始化Hexo目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span>  <span class="comment"># 进入用户当前目录</span></span><br><span class="line">$ hexo init HexoBlog  <span class="comment"># 在当前目录初始化HexoBlog，并从github下载默认主题landscape及相关依赖，经过一段时间等待后，目录创建成功</span></span><br><span class="line">$ <span class="built_in">cd</span> HexoBlog <span class="comment"># 进入HexoBlog目录</span></span><br><span class="line">$ npm install <span class="comment"># 安装剩余部分</span></span><br></pre></td></tr></table></figure><p>安装完毕，查看HexoBlog目录大至有以下几个文件  </p><table><thead><tr><th>目录/文件</th><th>说明</th></tr></thead><tbody><tr><td>_config.yml</td><td>网站配置信息,包括标题、描述、语言、主题、路由配置、github部署信息等基本相关相信都可以在这里进行配置</td></tr><tr><td>package.json</td><td>应用程序信息</td></tr><tr><td>scaffolds</td><td>创建模板，默认有draft、page、post三种，也可以创建自己的模板，执行hexo new的时候可指定</td></tr><tr><td>source</td><td>资源目录，生成时_posts目录会被解析到public里面，而其他像_drafts则会被忽略，本地图片资源也放到此目录</td></tr><tr><td>themes</td><td>主题目录，默认主题为landscape，而其他主题也会默认装到这个目录</td></tr></tbody></table><p><em>小技巧</em>：Hexo生成的目录可当成一个node.js的项目，通过VSCode，Sublime Text，WebStorm等工具来管理项目将会变得非常的方便，如：<br><img src="/images/hexo/3.png" alt=""></p><h3 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h3><p>一般安装好后，简单配置_config.yml信息，就可以直接运行Hexo，打开终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/HexoBlog</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>如果没有异常的话，终端提示Hexo默认启动端口为4000的HTTP服务，此时你可以访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，默认会有一篇hello world的文章</p><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>layout为创建文件的模板，默认有三种形式，post, page, draft，可自定义模板存储到scaffolds目录里，如果是自定义的layout默认为post方式，建立的文章会存储到source/_posts里面。<br>如，创建一篇新文章，执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post Hexo-快速、简洁且高效的博客框架</span><br></pre></td></tr></table></figure></p><p>执行成功后在source/_posts目录里会有一个文件名为『Hexo-快速、简洁且高效的博客框架.md』的Markdown文件，由于默认使用scaffolds/post.md模板，则默认生成内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo-快速、简洁且高效的博客框架</span><br><span class="line">date: 2017-01-05 09:20:51</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>通过编辑器打开这个文件进行编辑即可。</p><h3 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h3><p>layout如果为draft则表示草稿箱，默认不发布，建立的文章会存储到source/_draft目录里，待要发布时，直接执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;</span><br><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>生成与部署</p></blockquote><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>Hexo部署到服务器或github首先需要生成静态文件，默认静态文件会生成到public里，执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>待静态文件生成完毕，打开配置文件_config.yml，找到deploy部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 你的github仓库地址，类似：https://www.github.com/YourName/hexo.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>配置完成，执行指令，等待片刻即可上传到github：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><h3 id="组合部署"><a href="#组合部署" class="headerlink" title="组合部署"></a>组合部署</h3><p>可以将生成静态文件跟部署结合使用，执行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d <span class="comment"># 相当于hexo generate --deploy</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ hexo d -g <span class="comment"># 相当于hexo deploy --generate</span></span><br></pre></td></tr></table></figure></p><p>ok，通过以上操作，你尝试访问一下<a href="https://hexo.github.io" target="_blank" rel="noopener">https://hexo.github.io</a> 一个属于你的blog系统就已经搭建好了。enjoy!</p><p><em>&lt;预告&gt;</em> 下一篇将介绍Hexo的写作语法Markdown：<a href="http://tankc.cn/2017/01/07/Markdown-%E5%BF%8D%E4%B8%8D%E4%BD%8F%E7%88%B1%E4%B8%8A%E8%BF%99%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/">Markdown-忍不住爱上这写作方式</a> 敬请关注^O^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正如标题所示，Hexo是一个快速、简洁且高效的博客框架，配合Markdown使用，整个写作过程行云流水非常高效。下面将简单介绍整个Hexo博客的简易操作使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;环境搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在使用Hexo之前需要
      
    
    </summary>
    
      <category term="杂项" scheme="https://tankc.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Hexo" scheme="https://tankc.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
